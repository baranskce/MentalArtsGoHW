basePath: /api/v1
definitions:
  models.Album:
    properties:
      id:
        type: integer
      musician:
        $ref: '#/definitions/models.Musician'
      musicianID:
        type: string
      releaseYear:
        type: integer
      title:
        type: string
    type: object
  models.Musician:
    properties:
      age:
        type: integer
      firstName:
        type: string
      genre:
        type: string
      id:
        type: string
      lastName:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /album:
    post:
      consumes:
      - application/json
      description: Adds a new album to the database.
      parameters:
      - description: New Album Info
        in: body
        name: album
        required: true
        schema:
          $ref: '#/definitions/models.Album'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Album'
      summary: Create a new album
      tags:
      - Albums
  /album/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes the album with the specified ID.
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Album deleted
          schema:
            type: string
      summary: Delete an album by ID
      tags:
      - Albums
    get:
      consumes:
      - application/json
      description: Returns the album with the specified ID as JSON.
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Album'
      summary: Get an album by ID
      tags:
      - Albums
    put:
      consumes:
      - application/json
      description: Updates the details of an existing album.
      parameters:
      - description: Album ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Album Info
        in: body
        name: album
        required: true
        schema:
          $ref: '#/definitions/models.Album'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Album'
      summary: Update an album
      tags:
      - Albums
  /albums:
    delete:
      consumes:
      - application/json
      description: Deletes all albums from the database.
      produces:
      - application/json
      responses:
        "200":
          description: All albums deleted
          schema:
            type: string
      summary: Delete all albums
      tags:
      - Albums
    get:
      consumes:
      - application/json
      description: Returns a list of all albums as JSON.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Album'
            type: array
      summary: Get all albums
      tags:
      - Albums
  /musicians:
    delete:
      description: Deletes all musicians from the database.
      produces:
      - application/json
      responses:
        "200":
          description: All musicians deleted
          schema:
            type: string
        "400":
          description: Error message
          schema:
            type: string
      summary: Delete all musicians
      tags:
      - Musician
    get:
      description: Returns a list of all musicians.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Musician'
            type: array
        "400":
          description: Error message
          schema:
            type: string
      summary: Retrieve all musicians
      tags:
      - Musician
    post:
      consumes:
      - application/json
      description: Adds a new musician to the database.
      parameters:
      - description: Musician Info
        in: body
        name: musician
        required: true
        schema:
          $ref: '#/definitions/models.Musician'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Musician'
        "400":
          description: Error message
          schema:
            type: string
      summary: Create a new musician
      tags:
      - Musician
  /musicians/{id}:
    delete:
      description: Deletes the musician with the specified ID.
      parameters:
      - description: Musician ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Musician deleted
          schema:
            type: string
        "400":
          description: Error message
          schema:
            type: string
      summary: Delete a musician by ID
      tags:
      - Musician
    get:
      description: Returns a single musician by ID.
      parameters:
      - description: Musician ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Musician'
        "400":
          description: Error message
          schema:
            type: string
      summary: Retrieve a musician by ID
      tags:
      - Musician
    put:
      consumes:
      - application/json
      description: Updates an existing musician's information.
      parameters:
      - description: Musician ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Musician Info
        in: body
        name: musician
        required: true
        schema:
          $ref: '#/definitions/models.Musician'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Musician'
        "400":
          description: Error message
          schema:
            type: string
      summary: Update a musician
      tags:
      - Musician
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
